# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: practicetest123
# "service" is the name of this project. This will also be added to your AWS resource names.
service: productService

provider:
  name: aws
  runtime: nodejs22.x
  region: ap-southeast-1
  environment:
    PRODUCTS_TABLE: !Ref ProductTable
    REGION: ap-southeast-1
    PRODUCT_BUCKET_NAME: !Ref ProductImagesBucket
    CLIENT_ID: ${ssm:/CLIENT_ID}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Scan
        - dynamodb:DeleteItem
        - sns:Publish
      Resource:
        - !Sub arn:aws:s3:::${ProductImagesBucket}/*
        - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ProductTable}
        - !Ref ProductCleanupTopic
  httpApi:
    authorizers:
      MyCognitoAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/ap-southeast-1_LjeywfNgL
        audience:
          - ${ssm:/CLIENT_ID}

resources:
  Resources:
    ProductTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Products
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

    ProductImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: product-images-bucket-sls
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          IgnorePublicAcls: false
          BlockPublicPolicy: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods:
                - PUT
              AllowedOrigins:
                - '*'

    ProductImagesBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ProductImagesBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
                - s3:PutObject
              # This is join method to concatenate the bucket ARN with '/*' to allow access to all objects in the bucket
              # There could be multiple ways to write !Join method some of them are:
              # 1. !Join [ '', [!GetAtt ProductImagesBucket.Arn, '/*'] ]
              # 2. !Join [ '', ['arn:aws:s3:::', !Ref ProductImagesBucket, '/*'] ]
              Resource: !Join ['', [!GetAtt ProductImagesBucket.Arn, '/*']]

    ProductCleanupTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ProductCleanupTopic

    ProductCleanupSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref ProductCleanupTopic
        Protocol: email
        Endpoint: narayanmaitysp@gmail.com

functions:
  getUploadUrl:
    handler: handlers/getUploadUrl.getUploadUrl
    events:
      - httpApi:
          path: /get-upload-url
          method: post
          authorizer:
            name: MyCognitoAuthorizer
  updateProductData:
    handler: handlers/updateProductData.updateProductData
    events:
      - s3:
          bucket: !Ref ProductImagesBucket
          event: s3:ObjectCreated:Put
          existing: true # This allows the function to be triggered by an existing object in the bucket
